package com.chrisw.vulnerabilityservice.service;

import com.chrisw.vulnerabilityservice.model.library.Repository;
import com.chrisw.vulnerabilityservice.repo.RepositoryRepo;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.ArrayList;
import java.util.List;

import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)

public class RepositoryServiceTests {
    
    @Mock
    RepositoryRepo repositoryRepo;

    private RepositoryService repositoryService;

    @BeforeEach
    public void initLibaryService() {
        repositoryService = new RepositoryService(repositoryRepo);
    }

    @Test
    public void getAllWhenResultsExist() {
        // given
        Repository repo = Repository.builder().name("name").url(null).build();

        List<Repository> results = new ArrayList<>();
        results.add(repo);
        doReturn(results).when(repositoryRepo).findAll();
        // when
        List<Repository> repos = repositoryService.findAll();
        // then
        verify(repositoryRepo, times(1)).findAll();
        assertEquals(1, repos.size());
    }

    @Test
    public void getAllWhenNoResultsExist() {
        // given
        List<Repository> results = new ArrayList<>();
        doReturn(results).when(repositoryRepo).findAll();
        // when
        List<Repository> repos = repositoryService.findAll();
        // then
        verify(repositoryRepo, times(1)).findAll();
        assertEquals(0, repos.size());
    }

}

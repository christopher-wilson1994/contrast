package com.chrisw.vulnerabilityservice.service;

import com.chrisw.vulnerabilityservice.model.library.Library;
import com.chrisw.vulnerabilityservice.repo.LibraryRepo;
import com.chrisw.vulnerabilityservice.testutils.TestObjectGenerators;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.web.server.ResponseStatusException;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import static org.junit.Assert.assertThrows;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)

public class LibraryServiceTests {

    @Mock
    LibraryRepo libraryRepo;

    private LibraryService libraryService;

    @BeforeEach
    public void initLibaryService() {
        libraryService = new LibraryService(libraryRepo);
    }

    @Test
    public void getAllWhenResultsExist() {
        // given
        Library lib = TestObjectGenerators.createLibrary("libraryName", 1);
        List<Library> results = new ArrayList<>();
        results.add(lib);
        doReturn(results).when(libraryRepo).findAll();
        // when
        List<Library> libraries = libraryService.findAll();
        // then
        verify(libraryRepo, times(1)).findAll();
        assertEquals(results.size(), libraries.size());
    }

    @Test
    public void getAllWhenNoResultsExist() {
        // given
        List<Library> results = new ArrayList<>();
        doReturn(results).when(libraryRepo).findAll();
        // when
        List<Library> libraries = libraryService.findAll();
        // then
        verify(libraryRepo, times(1)).findAll();
        assertEquals(results.size(), libraries.size());
    }

    @Test
    public void findByIdWhenExists() {
        // given
        long id = 1;
        Library lib = TestObjectGenerators.createLibrary("libraryName", id);
        Optional<Library> dbLib = Optional.of(lib);        
        doReturn(dbLib).when(libraryRepo).findById(id);
        // when
       Library foundLibrary = libraryService.findById(id);
        // then
        verify(libraryRepo, times(1)).findById(id);
        assertEquals(lib, foundLibrary);
    }

    @Test
    public void findByIdWhenDoesNotExists() {
        // given
        long id = 1;
        doReturn(Optional.empty()).when(libraryRepo).findById(id);
        // when
        assertThrows(ResponseStatusException.class, () -> {
            libraryService.findById(id);
        });
        // then
        verify(libraryRepo, times(1)).findById(id);
    }

    @Test
    public void dddWithNoId(){
        // given
        Library lib = TestObjectGenerators.createLibrary("libToSave", 0);
        // when
        libraryService.add(lib);
        // then
        verify(libraryRepo, times(1)).save(lib);
    }

    @Test
    public void addWithId(){
        // given
        long id = 1;
        Library lib = TestObjectGenerators.createLibrary("libToSave", id);
        // when
        assertThrows(ResponseStatusException.class, () -> {
            libraryService.add(lib);
        });        
        // then
        verify(libraryRepo, times(0)).save(lib);
    }

    @Test
    public void updateWhenLibraryExists(){
        // given
        long id =1;
        Library lib = TestObjectGenerators.createLibrary("libraryName", id);

        Optional<Library> dbLib = Optional.of(lib);
        Library updatedLib = TestObjectGenerators.createLibrary("NewLibraryName", id);
        doReturn(dbLib).when(libraryRepo).findById(id);
        doReturn(updatedLib).when(libraryRepo).save(any(Library.class));
        // when
        Library savedLib = libraryService.update(id,updatedLib);
        // then
        verify(libraryRepo, times(1)).save(any(Library.class));
        verify(libraryRepo, times(1)).findById(id);
        assertEquals(updatedLib,savedLib);
    }

    @Test
    public void updateWhenLibraryDoesNotExists(){
        // given
        long id =1;
        Library updatedLib = TestObjectGenerators.createLibrary("NewLibraryName", id);
        doReturn(Optional.empty()).when(libraryRepo).findById(id);
        // when
        assertThrows(ResponseStatusException.class, () -> {
            libraryService.update(id,updatedLib);
        });        
        // then
        verify(libraryRepo, times(0)).save(any(Library.class));
        verify(libraryRepo, times(1)).findById(id);
    }

    @Test
    public void deleteByIdWhenExists(){

        //given
        long id = 1;
        doReturn(true).when(libraryRepo).existsById(id);

        //when
        libraryService.deleteById(id);
        //then
        verify(libraryRepo, times(1)).deleteById(id);
    }


    @Test
    public void deleteByIdWhenDoesNotExists(){

        //given
        long id = 1;
        doReturn(false).when(libraryRepo).existsById(id);

        //when
        assertThrows(ResponseStatusException.class, () -> {
            libraryService.deleteById(id);
        });   
        //then
        verify(libraryRepo, times(0)).deleteById(id);
    }



}
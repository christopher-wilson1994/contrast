package com.chrisw.vulnerabilityservice.service;

import com.chrisw.vulnerabilityservice.model.library.Severity;
import com.chrisw.vulnerabilityservice.model.library.VulnerabilityType;
import com.chrisw.vulnerabilityservice.repo.LibraryRepo;
import com.chrisw.vulnerabilityservice.repo.VulnerabilityTypeRepo;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.client.RestTemplate;

import java.util.ArrayList;
import java.util.List;

import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)

public class VulnerabilityServiceTests {
    
    @Mock
    VulnerabilityTypeRepo vulnerabilityTypeRepo;

    @Mock
    RestTemplate restTemplate;



    @Autowired
    LibraryRepo libraryRepo;



    private VulnerabilityService vulnerabilityService;

    @BeforeEach
    public void initLibaryService() {
        vulnerabilityService = new VulnerabilityService(vulnerabilityTypeRepo,libraryRepo,restTemplate);
    }

    @Test
    public void getAllTypesWhenResultsExist() {
        // given
        VulnerabilityType type = VulnerabilityType.builder().name("name").severity(Severity.HIGH).build();

        List<VulnerabilityType> results = new ArrayList<>();
        results.add(type);
        doReturn(results).when(vulnerabilityTypeRepo).findAll();
        // when
        List<VulnerabilityType> repos = vulnerabilityService.findAllTypes();
        // then
        verify(vulnerabilityTypeRepo, times(1)).findAll();
        assertEquals(1, repos.size());
    }

    @Test
    public void getAllTypesWhenNoResultsExist() {
        // given
        List<VulnerabilityType> results = new ArrayList<>();
        doReturn(results).when(vulnerabilityTypeRepo).findAll();
        // when
        List<VulnerabilityType> repos = vulnerabilityService.findAllTypes();
        // then
        verify(vulnerabilityTypeRepo, times(1)).findAll();
        assertEquals(0, repos.size());
    }

}

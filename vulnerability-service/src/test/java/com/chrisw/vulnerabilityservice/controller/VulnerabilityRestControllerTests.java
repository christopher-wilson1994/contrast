package com.chrisw.vulnerabilityservice.controller;

import com.chrisw.vulnerabilityservice.model.library.Severity;
import com.chrisw.vulnerabilityservice.model.library.VulnerabilityType;
import com.chrisw.vulnerabilityservice.service.VulnerabilityService;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;
import org.springframework.test.web.servlet.ResultActions;

import java.util.ArrayList;
import java.util.List;

import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.*;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@ExtendWith(SpringExtension.class)
@WebMvcTest(controllers = VulnerabilityRestController.class)
class VulnerabilityRestControllerTests {

  @Autowired
  private MockMvc mockMvc;

  @Autowired
  ObjectMapper objectMapper;

  @MockBean
  private VulnerabilityService vulnerabilityService;

  @Test
  public void getAllTypes() throws Exception {
    //given
    VulnerabilityType vul = VulnerabilityType.builder().name("name").severity(Severity.HIGH).build();
    List<VulnerabilityType> results = new ArrayList<>();
    results.add(vul);
    doReturn(results).when(vulnerabilityService).findAllTypes();

    //when
    ResultActions resultAction = mockMvc.perform(get("/vulnerabilities/types"));

    //then
    MvcResult result = resultAction.andExpect(status().isOk()).andReturn();
    String content = result.getResponse().getContentAsString();
    List<VulnerabilityType> foundTypes = objectMapper.readValue(content, new TypeReference<List<VulnerabilityType>>(){});

    assertEquals(results.size(),foundTypes.size());
    verify(vulnerabilityService, times(1)).findAllTypes();

  }

 

}
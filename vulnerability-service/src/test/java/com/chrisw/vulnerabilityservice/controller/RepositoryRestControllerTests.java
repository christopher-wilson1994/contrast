package com.chrisw.vulnerabilityservice.controller;

import com.chrisw.vulnerabilityservice.model.library.Repository;
import com.chrisw.vulnerabilityservice.service.RepositoryService;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;
import org.springframework.test.web.servlet.ResultActions;

import java.util.ArrayList;
import java.util.List;

import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.*;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@ExtendWith(SpringExtension.class)
@WebMvcTest(controllers = RepositoryRestController.class)
class RepositoryRestControllerTests {

  @Autowired
  private MockMvc mockMvc;

  @Autowired
  ObjectMapper objectMapper;

  @MockBean
  private RepositoryService repositoryService;

  @Test
  public void getAll() throws Exception {
    //given
    Repository repo = Repository.builder().name("name").url(null).build();
    List<Repository> results = new ArrayList<>();
    results.add(repo);
    doReturn(results).when(repositoryService).findAll();
    //when
    ResultActions resultAction = mockMvc.perform(get("/repositories"));

    //then
    MvcResult result = resultAction.andExpect(status().isOk()).andReturn();
    String content = result.getResponse().getContentAsString();
    List<Repository> repos = objectMapper.readValue(content, new TypeReference<List<Repository>>(){});

    assertEquals(results.size(),repos.size());
    verify(repositoryService, times(1)).findAll();

  }


}
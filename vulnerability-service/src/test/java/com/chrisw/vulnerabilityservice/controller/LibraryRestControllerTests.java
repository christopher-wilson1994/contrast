package com.chrisw.vulnerabilityservice.controller;

import com.chrisw.vulnerabilityservice.model.library.Library;
import com.chrisw.vulnerabilityservice.service.LibraryService;
import com.chrisw.vulnerabilityservice.testutils.TestObjectGenerators;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;
import org.springframework.test.web.servlet.ResultActions;
import org.springframework.web.server.ResponseStatusException;

import java.util.ArrayList;
import java.util.List;

import static org.junit.Assert.assertEquals;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.*;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@ExtendWith(SpringExtension.class)
@WebMvcTest(controllers = LibraryRestController.class)
class LibraryRestControllerTests {

  @Autowired
  private MockMvc mockMvc;

  @Autowired
  ObjectMapper objectMapper;

  @MockBean
  private LibraryService libraryService;

  @Test
  public void getAll() throws Exception {
    //given
    Library lib = TestObjectGenerators.createLibrary("name", 1);
    List<Library> results = new ArrayList<>();
    results.add(lib);
    doReturn(results).when(libraryService).findAll();

    //when
    ResultActions resultAction = mockMvc.perform(get("/libraries"));

    //then
    MvcResult result = resultAction.andExpect(status().isOk()).andReturn();
    String content = result.getResponse().getContentAsString();
    List<Library> foundTypes = objectMapper.readValue(content, new TypeReference<List<Library>>(){});

    assertEquals(results.size(),foundTypes.size());
    verify(libraryService, times(1)).findAll();

  }

  @Test
  public void findByIdExists() throws Exception {
    //given
    long id = 1;
    Library lib = TestObjectGenerators.createLibrary("name", 1);
    doReturn(lib).when(libraryService).findById(id);

    //when
    ResultActions resultAction = mockMvc.perform(get("/library/{id}",id));

    //then
    MvcResult result = resultAction.andExpect(status().isOk()).andReturn();
    String content = result.getResponse().getContentAsString();
    Library foundLib = objectMapper.readValue(content, Library.class);

    assertEquals(lib.getId(),foundLib.getId());
    verify(libraryService, times(1)).findById(id);
  }

  @Test
  public void findByIdDoesNotExist() throws Exception {
    //given
    long id = 1;
    doThrow(new ResponseStatusException(HttpStatus.NOT_FOUND, "errorMessage")).when(libraryService).findById(id);

    //when
    ResultActions resultAction = mockMvc.perform(get("/library/{id}",id));

    //then
   resultAction.andExpect(status().isNotFound());
    verify(libraryService, times(1)).findById(id);
  }

  @Test
  public void createNewWithNoIdAndValidFields() throws Exception{
    //given
    Library lib = TestObjectGenerators.createLibrary("new lib", 0);
    String libString = objectMapper.writeValueAsString(lib);
    doReturn(lib).when(libraryService).add(any(Library.class));

    //when
    ResultActions resultAction = mockMvc.perform(post("/library")
                                        .contentType(MediaType.APPLICATION_JSON)
                                        .characterEncoding("utf-8")
                                        .content(libString));

    //then
    MvcResult result = resultAction.andExpect(status().isOk()).andReturn();
    String content = result.getResponse().getContentAsString();
    Library createdLib = objectMapper.readValue(content, Library.class);
    verify(libraryService, times(1)).add(any(Library.class));
    assertEquals(lib.getName(),createdLib.getName());
  }

  @Test
  public void createNewWithNoIdAndInvalidFields() throws Exception{
    //given
    Library lib = TestObjectGenerators.createLibrary("new lib", 0);
    lib.setName(null);
    String libString = objectMapper.writeValueAsString(lib);
    // doReturn(lib).when(libraryService).add(any(Library.class));

    //when
    ResultActions resultAction = mockMvc.perform(post("/library")
                                        .contentType(MediaType.APPLICATION_JSON)
                                        .characterEncoding("utf-8")
                                        .content(libString));

    //then
    resultAction.andExpect(status().isBadRequest());
    verify(libraryService, times(0)).add(any(Library.class));
  }

  @Test
  public void createNewWithIdAndValidFields() throws Exception{
    //given
    Library lib = TestObjectGenerators.createLibrary("new lib", 2);
    String libString = objectMapper.writeValueAsString(lib);
    doThrow(new ResponseStatusException(HttpStatus.BAD_REQUEST, "errorMessage")).when(libraryService).add(any(Library.class));

    //when
    ResultActions resultAction = mockMvc.perform(post("/library")
                                        .contentType(MediaType.APPLICATION_JSON)
                                        .characterEncoding("utf-8")
                                        .content(libString));

    //then
    resultAction.andExpect(status().isBadRequest());
    verify(libraryService, times(1)).add(any(Library.class));
  }

  @Test
  public void updateExisting() throws Exception{
    //given
    long id = 1;
    Library lib = TestObjectGenerators.createLibrary("new lib", 2);
    String libString = objectMapper.writeValueAsString(lib);
    doReturn(lib).when(libraryService).update(eq(id),any(Library.class));
    //when
    ResultActions resultAction = mockMvc.perform(put("/library/{id}",id)
                                        .contentType(MediaType.APPLICATION_JSON)
                                        .characterEncoding("utf-8")
                                        .content(libString));

    //then
   resultAction.andExpect(status().isOk()).andReturn();

    verify(libraryService, times(1)).update(eq(id),any(Library.class));
  }

  @Test
  public void updateNonExisting() throws Exception{
    //given
    long id = 1;
    Library lib = TestObjectGenerators.createLibrary("new lib", 2);
    String libString = objectMapper.writeValueAsString(lib);
    doThrow(new ResponseStatusException(HttpStatus.NOT_FOUND, "errorMessage"))
    .when(libraryService).update(eq(id),any(Library.class));
    //when
    ResultActions resultAction = mockMvc.perform(put("/library/{id}",id)
                                        .contentType(MediaType.APPLICATION_JSON)
                                        .characterEncoding("utf-8")
                                        .content(libString));

    //then
    resultAction.andExpect(status().isNotFound());
    verify(libraryService, times(1)).update(eq(id),any(Library.class));
  }


  @Test
  public void deleteExisting() throws Exception{
    //given
    long id = 1;

    // when
    ResultActions resultAction = mockMvc.perform(delete("/library/{id}",id));

    //then
    resultAction.andExpect(status().isOk());
    verify(libraryService, times(1)).deleteById(id);
  }

  @Test
  public void deleteNonExisting() throws Exception{
    //given
    long id = 1;
    doThrow(new ResponseStatusException(HttpStatus.NOT_FOUND, "errorMessage"))
    .when(libraryService).deleteById(id);

    // when
    ResultActions resultAction = mockMvc.perform(delete("/library/{id}",id));

    //then
    resultAction.andExpect(status().isNotFound());
    verify(libraryService, times(1)).deleteById(id);
  }


  

 

}
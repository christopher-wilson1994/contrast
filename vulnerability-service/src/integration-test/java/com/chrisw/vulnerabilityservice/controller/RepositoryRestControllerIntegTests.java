package com.chrisw.vulnerabilityservice.controller;

import com.chrisw.vulnerabilityservice.VulnerabilityServiceApplication;
import com.chrisw.vulnerabilityservice.model.library.Repository;
import com.chrisw.vulnerabilityservice.repo.RepositoryRepo;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.annotation.DirtiesContext;
import org.springframework.test.context.TestPropertySource;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;
import org.springframework.test.web.servlet.ResultActions;

import java.net.URL;
import java.util.List;

import static org.junit.Assert.assertEquals;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@RunWith(SpringRunner.class)
@SpringBootTest(webEnvironment=
        SpringBootTest.WebEnvironment.MOCK,
        classes = {VulnerabilityServiceApplication.class})
@AutoConfigureMockMvc
@TestPropertySource("/application-test.properties")
@DirtiesContext(classMode = DirtiesContext.ClassMode.BEFORE_EACH_TEST_METHOD)
public class RepositoryRestControllerIntegTests {

    @Autowired
    private MockMvc mockMvc;

    @Autowired
    RepositoryRepo repositoryRepo;

    @Autowired
    ObjectMapper objectMapper;

    @Test
    public void getAll()throws Exception{
        Repository repo = Repository.builder()
                                    .name("repo name")
                                    .url(new URL("http://integ-test.com"))
                                    .build();
        repositoryRepo.save(repo);

        //when
        ResultActions resultAction = mockMvc.perform(get("/repositories"));

        //then
        MvcResult result = resultAction.andExpect(status().isOk()).andReturn();
        String content = result.getResponse().getContentAsString();
        List<Repository> foundLibraries = objectMapper.readValue(content, new TypeReference<List<Repository>>(){});
        assertEquals(1,foundLibraries.size());
    }
}

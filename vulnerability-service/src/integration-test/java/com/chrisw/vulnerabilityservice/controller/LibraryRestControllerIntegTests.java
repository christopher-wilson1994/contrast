package com.chrisw.vulnerabilityservice.controller;

import com.chrisw.vulnerabilityservice.VulnerabilityServiceApplication;
import com.chrisw.vulnerabilityservice.model.library.Library;
import com.chrisw.vulnerabilityservice.repo.LibraryRepo;
import com.chrisw.vulnerabilityservice.repo.RepositoryRepo;
import com.chrisw.vulnerabilityservice.testutils.TestObjectGenerators;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import lombok.extern.slf4j.Slf4j;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.test.annotation.DirtiesContext;
import org.springframework.test.context.TestPropertySource;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;
import org.springframework.test.web.servlet.ResultActions;

import java.util.List;

import static org.junit.Assert.assertEquals;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@RunWith(SpringRunner.class)
@SpringBootTest(webEnvironment=
  SpringBootTest.WebEnvironment.MOCK,
  classes = {VulnerabilityServiceApplication.class})
@AutoConfigureMockMvc
@TestPropertySource("/application-test.properties")
@DirtiesContext(classMode = DirtiesContext.ClassMode.BEFORE_EACH_TEST_METHOD)
@Slf4j
public class LibraryRestControllerIntegTests {

  @Autowired
  private MockMvc mockMvc;

  @Autowired
  LibraryRepo libraryRepo;

  @Autowired
  RepositoryRepo repositoryRepo;

  @Autowired
  ObjectMapper objectMapper;

  @Test
  public void getAll() throws Exception{
    //given
    Library lib = TestObjectGenerators.createLibrary("name", 0);
    repositoryRepo.save(lib.getRepository());
    libraryRepo.save(lib);

    //when
    ResultActions resultAction = mockMvc.perform(get("/libraries"));

    //then
    MvcResult result = resultAction.andExpect(status().isOk()).andReturn();
    String content = result.getResponse().getContentAsString();
    log.info(content);
    List<Library> foundLibraries = objectMapper.readValue(content, new TypeReference<List<Library>>(){});
    assertEquals(foundLibraries.size(),1);
  }

  @Test
  public void findByIdExists() throws Exception {
    //given
    long id = 1;
    Library lib = TestObjectGenerators.createLibrary("name", 0);
    repositoryRepo.save(lib.getRepository());
    Library dbLib =libraryRepo.save(lib);

    //when
    ResultActions resultAction = mockMvc.perform(get("/library/{id}",dbLib.getId()));

    //then
    MvcResult result = resultAction.andExpect(status().isOk()).andReturn();
    String content = result.getResponse().getContentAsString();
    Library foundLib = objectMapper.readValue(content, Library.class);

    assertEquals(dbLib.getId(),foundLib.getId());
  }

  @Test
  public void findByIdDoesNotExists() throws Exception {
    //given

    //when
    ResultActions resultAction = mockMvc.perform(get("/library/{id}",1));

    //then
    resultAction.andExpect(status().isNotFound());
  }

  @Test
  public void createNewWithNoIdAndValidFields() throws Exception{
    //given
    Library lib = TestObjectGenerators.createLibrary("new lib", 0);
    repositoryRepo.save(lib.getRepository());
    String libString = objectMapper.writeValueAsString(lib);

    //when
    ResultActions resultAction = mockMvc.perform(post("/library")
            .contentType(MediaType.APPLICATION_JSON)
            .characterEncoding("utf-8")
            .content(libString));

    //then
    MvcResult result = resultAction.andExpect(status().isOk()).andReturn();
    String content = result.getResponse().getContentAsString();
    Library responseLib = objectMapper.readValue(content, Library.class);
    Library dbLib = libraryRepo.findAll().get(0);
    assertEquals(lib.getName(),dbLib.getName());
    assertEquals(lib.getName(),responseLib.getName());
  }

  @Test
  public void createNewWithIdAndValidFields() throws Exception {
    //given
    Library lib = TestObjectGenerators.createLibrary("new lib", 1);
    String libString = objectMapper.writeValueAsString(lib);

    //when
    ResultActions resultAction = mockMvc.perform(post("/library")
            .contentType(MediaType.APPLICATION_JSON)
            .characterEncoding("utf-8")
            .content(libString));

    //then
    resultAction.andExpect(status().isBadRequest());

    long dbSize = libraryRepo.findAll().size();
    assertEquals(0, dbSize);
  }

  @Test
  public void createNewWithInvalidFields() throws Exception {
    //given
    Library lib = TestObjectGenerators.createLibrary("new lib", 1);
    lib.setName(null);
    String libString = objectMapper.writeValueAsString(lib);

    //when
    ResultActions resultAction = mockMvc.perform(post("/library")
            .contentType(MediaType.APPLICATION_JSON)
            .characterEncoding("utf-8")
            .content(libString));

    //then
    resultAction.andExpect(status().isBadRequest());

    long dbSize = libraryRepo.findAll().size();
    assertEquals(0, dbSize);
  }

  public void updateExisting() throws Exception{
    //given
    Library lib = TestObjectGenerators.createLibrary("new lib", 0);
    Library dbLib = libraryRepo.save(lib);
    lib.setName("new lin renamed");
    String libString = objectMapper.writeValueAsString(lib);
    //when
    ResultActions resultAction = mockMvc.perform(put("/library/{id}",dbLib.getId())
            .contentType(MediaType.APPLICATION_JSON)
            .characterEncoding("utf-8")
            .content(libString));

    //then
    resultAction.andExpect(status().isOk()).andReturn();
    MvcResult result = resultAction.andExpect(status().isOk()).andReturn();
    String content = result.getResponse().getContentAsString();
    Library responseLib = objectMapper.readValue(content, Library.class);
    Library updatedDbRecord = libraryRepo.findById(dbLib.getId()).get();
    assertEquals(lib.getName(),updatedDbRecord.getName());
    assertEquals(lib.getName(),responseLib.getName());

  }

  @Test
  public void updateNonExisting() throws Exception{
    //given
    Library lib = TestObjectGenerators.createLibrary("new lib", 2);
    String libString = objectMapper.writeValueAsString(lib);

    //when
    ResultActions resultAction = mockMvc.perform(put("/library/{id}",lib.getId())
            .contentType(MediaType.APPLICATION_JSON)
            .characterEncoding("utf-8")
            .content(libString));

    //then
    resultAction.andExpect(status().isNotFound());
    long dbSize = libraryRepo.findAll().size();
    assertEquals(0, dbSize);
  }

  @Test
  public void deleteExisting() throws Exception{
    //given
    Library lib = TestObjectGenerators.createLibrary("new lib", 0);
    repositoryRepo.save(lib.getRepository());
    repositoryRepo.save(lib.getRepository());
    Library dbLib = libraryRepo.save(lib);

    // when
    ResultActions resultAction = mockMvc.perform(delete("/library/{id}",dbLib.getId()));

    //then
    resultAction.andExpect(status().isOk());
    long dbSize = libraryRepo.findAll().size();
    assertEquals(0, dbSize);
  }

  @Test
  public void deleteNonExisting() throws Exception{
    //given

    // when
    ResultActions resultAction = mockMvc.perform(delete("/library/{id}",1));

    //then
    resultAction.andExpect(status().isNotFound());

  }
}

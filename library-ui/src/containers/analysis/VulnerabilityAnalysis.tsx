import React, { useState, useEffect } from "react";
import {
  Table,
  Tag,
  Button,
  Divider,
  Input,
  Typography,
  notification,
} from "antd";
import { mavenVulnerabilitiesFromGithub } from "../../service/VulnerabilityService";
const { Title } = Typography;

const VulnerabilityAnalysis: React.FC = () => {
  const [githubUrl, setGithubUrl] = useState("");
  const [disableAnalysis, setDisableAnalysis] = useState(true);
  const [foundDependancies, setFoundDependancies] = useState([]);

  const mavenAnalysis = async () => {
    try {
      setFoundDependancies([]);
      const analysis = await mavenVulnerabilitiesFromGithub(githubUrl);
      setFoundDependancies(analysis);
    } catch {
      notification.error({
        message: `Failed to Preform analysis`,
        placement: "bottomRight",
      });
    }
  };
  const columns = [
    {
      title: "Name",
      dataIndex: "artifactId",
      key: "artifactId",
    },
    {
      title: "Version",
      dataIndex: "version",
      key: "version",
      // eslint-disable-next-line react/display-name
      render: (version: string) => <Tag color="blue">{version}</Tag>,
    },
  ];

  useEffect(() => {
    //ensure url is valid
    const pattern = new RegExp(
      "^(https?:\\/\\/)?" + // protocol
        "((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.)+[a-z]{2,}|" + // domain name
        "((\\d{1,3}\\.){3}\\d{1,3}))" + // OR ip (v4) address
        "(\\:\\d+)?(\\/[-a-z\\d%_.~+]*)*" + // port and path
        "(\\?[;&a-z\\d%_.~+=-]*)?" + // query string
        "(\\#[-a-z\\d_]*)?$",
      "i"
    );
    setDisableAnalysis(!pattern.test(githubUrl));
  }, [githubUrl]);

  return (
    <React.Fragment>
      <Divider orientation="center">
        <Title>Maven Vulnerability Analysis (BETA)</Title>
      </Divider>
      <p>
        {" "}
        The below analysis accepts a github url as a parameter. The pom.xml for
        the maven repo must be stored at the base of the repo. This currently
        only checks for libraries with the same name as librarys in our database
        and displays them. Example urls:
      </p>
      <ul>
        <li>
          <a
            rel="noopener noreferrer"
            target="_blank"
            href="https://github.com/spring-projects/spring-data-examples"
          >
            https://github.com/spring-projects/spring-data-examples
          </a>
          (spring-boot-starter-test library can be used to test)
        </li>
        <li>
          <a
            rel="noopener noreferrer"
            target="_blank"
            href="https://github.com/jenkins-docs/simple-java-maven-app"
          >
            https://github.com/jenkins-docs/simple-java-maven-app
          </a>
          (junit library can be used to test)
        </li>
      </ul>
      <Input
        placeholder="Enter github url here"
        value={githubUrl}
        onChange={(e) => setGithubUrl(e.target.value)}
      />
      <Button type="primary" disabled={disableAnalysis} onClick={mavenAnalysis}>
        Analyse
      </Button>
      <Table
        rowKey="artifactId"
        dataSource={foundDependancies}
        columns={columns}
      />
      ;
    </React.Fragment>
  );
};

export default VulnerabilityAnalysis;
